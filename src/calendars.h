/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */
#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif


#ifndef CALENDARS_H
#define CALENDARS_H

#include <stdlib.h>
#include <gtk/gtk.h>
#include "support.h"

#define MINUTESBYDAY 1439

/* types */
enum {
  CAL_TYPE_FORCE_WORKED = 1,
  CAL_TYPE_NON_WORKED,
  CAL_TYPE_DAY_OFF,
  CAL_TYPE_HOLIDAYS,
  CAL_TYPE_ABSENT,
  CAL_TYPE_PUBLIC_HOLIDAYS,
};

enum {
  CAL_MONDAY = 0,
  CAL_TUESDAY,
  CAL_WEDNESDAY,
  CAL_THURSDAY,
  CAL_FRIDAY,
  CAL_SATURDAY,
  CAL_SUNDAY
};

typedef struct {
   gint day;
   gint month;
   gint year;
   gint type;
} calendar_element;

typedef struct {
  gint id;
  GList *list;
  gchar *name;
  gboolean fDays[7][4];/* flag : if days hasn't standard schedule */
  gint schedules[7][4][2]; /* minutes equivalent [day of week] [period] [start/end] */
} calendar;



/* functions */
GtkWidget *calendars_dialog (APP_data *data);
void 
   calendars_day_selected (GtkCalendar *calendar, APP_data *data);
void 
   calendars_month_changed (GtkCalendar *calendar, APP_data *data);
void 
   calendars_new_calendar (gchar *str, gboolean clone, APP_data *data);
void 
   calendars_free_calendars (APP_data *data);
void 
   calendars_init_main_calendar (APP_data *data);
void 
   calendars_remove_calendar (gint position, APP_data *data);
void 
   calendars_day_double_click (GtkCalendar *calendar, APP_data *data);
void
on_calendars_reset_clicked (GtkButton *button, APP_data *data);
void 
   calendars_add_calendar (gint id, gchar *str, gboolean fDays[7][4], gint schedules[7][4][2], APP_data *data);
void
   on_calendars_clone_clicked (GtkButton *button, APP_data *data);
void 
   calendars_add_new_marked_date (gboolean fDisplay, gint index, guint day, guint month, guint year, gint type, APP_data *data);
gint 
   calendars_get_id (gint num, APP_data *data);
gint 
   calendars_get_nth_for_id (gint id, APP_data *data);
void 
   on_nworking_toggled (GtkToggleButton *togglebutton, APP_data *data);
void 
   on_force_working_toggled (GtkToggleButton *togglebutton, APP_data *data);
void 
   on_weekend_toggled (GtkToggleButton *togglebutton, APP_data *data);
void 
   on_holidays_toggled (GtkToggleButton *togglebutton, APP_data *data);
void 
   on_absent_toggled (GtkToggleButton *togglebutton, APP_data *data);
void 
   on_public_holiday_toggled (GtkToggleButton *togglebutton, APP_data *data);
void 
   on_monday_clicked (GtkButton *button, APP_data *data);
void 
   on_tuesday_clicked (GtkButton *button, APP_data *data);
void 
   on_wednesday_clicked (GtkButton *button, APP_data *data);
void 
   on_thursday_clicked (GtkButton *button, APP_data *data);
void 
   on_friday_clicked (GtkButton *button, APP_data *data);
void 
   on_saturday_clicked (GtkButton *button, APP_data *data);
void 
   on_sunday_clicked (GtkButton *button, APP_data *data);
gint 
   calendars_get_current_calendar_index (APP_data *data);
void 
   on_period_start_clicked (GtkButton *button, APP_data *data);
void 
   on_period_end_clicked (GtkButton *button, APP_data *data);
void 
   on_period_apply_clicked (GtkButton *button, APP_data *data);
gint 
   calendars_date_is_marked (gint day, gint month, gint year, gint index, APP_data *data);
void on_switch_period1_event (GObject  *widget, GParamSpec *pspec,
               APP_data *data);
void on_switch_period2_event (GObject  *widget, GParamSpec *pspec,
               APP_data *data);
void on_switch_period3_event (GObject  *widget, GParamSpec *pspec,
               APP_data *data);
void on_switch_period4_event (GObject  *widget, GParamSpec *pspec,
               APP_data *data);
void 
  on_combo_day_changed (GtkComboBox *widget, APP_data *data);
void 
  on_spin_p1s_hour_changed (GtkSpinButton *spin_button, APP_data *data);
void 
  on_spin_p2s_hour_changed (GtkSpinButton *spin_button, APP_data *data);
void 
  on_spin_p1e_hour_changed (GtkSpinButton *spin_button, APP_data *data);
void 
  on_spin_p2e_hour_changed (GtkSpinButton *spin_button, APP_data *data);
void 
  on_spin_p3s_hour_changed (GtkSpinButton *spin_button, APP_data *data);
void 
  on_spin_p3e_hour_changed (GtkSpinButton *spin_button, APP_data *data);
void 
  on_spin_p4s_hour_changed (GtkSpinButton *spin_button, APP_data *data);
void 
  on_spin_p4e_hour_changed (GtkSpinButton *spin_button, APP_data *data);
void 
  calendars_update_schedules (gint num, gint day, APP_data *data);
gboolean 
   on_min_spin_output (GtkSpinButton *spin, APP_data *data);
gint 
   calendars_get_starting_hour (gint index, gint day, APP_data *data);
gint 
   calendars_get_ending_hour (gint index, gint day, APP_data *data);

#endif /* CALENDARS_H */

